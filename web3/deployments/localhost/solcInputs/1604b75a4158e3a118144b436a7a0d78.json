{
  "language": "Solidity",
  "sources": {
    "contracts/Decentralazon.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.8;\n\ncontract Decentralazon {\n    address public owner;\n\n    struct Item {\n        uint256 id;\n        string name;\n        string category;\n        string image;\n        uint256 cost;\n        uint256 rating;\n        uint256 stock;\n    }\n\n    struct Order {\n        uint256 time;\n        Item item;\n    }\n\n    mapping(uint256 => Item) public items;\n    mapping(address => uint256) public orderCount;\n    mapping(address => mapping(uint256 => Order)) public orders;\n\n    event List(string name, uint256 cost, uint256 quantity);\n    event Buy(address buyer, uint256 orderId, uint256 itemId);\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"Only Owner is allowed to Call this function\"\n        );\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function list(\n        uint256 _id,\n        string memory _name,\n        string memory _category,\n        string memory _image,\n        uint256 _cost,\n        uint256 _rating,\n        uint256 _stock\n    ) public onlyOwner {\n        // create a item struct\n        Item memory item = Item(\n            _id,\n            _name,\n            _category,\n            _image,\n            _cost,\n            _rating,\n            _stock\n        );\n        // save item struct on blockchain\n        items[_id] = item;\n\n        // Emit event\n        emit List(_name, _cost, _stock);\n    }\n\n    function buy(uint256 _id) public payable {\n        Item memory item = items[_id];\n\n        require(msg.value >= item.cost, \"Need to send enough ETH.\");\n\n        require(item.stock > 0, \"Sorry!! Don't have enough stock\");\n\n        Order memory order = Order(block.timestamp, item);\n\n        orderCount[msg.sender]++;\n        orders[msg.sender][orderCount[msg.sender]] = order;\n\n        items[_id].stock = item.stock - 1;\n\n        emit Buy(msg.sender, orderCount[msg.sender], item.id);\n    }\n\n    function withdraw() public onlyOwner {\n        (bool success, ) = owner.call{value: address(this).balance}(\"\");\n        require(success, \"withdraw failed!\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}